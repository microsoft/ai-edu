// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace GoldenNumber
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GoldenNumberService 
    {
        private string _baseUrl = "https://goldennumber.aiedu.msra.cn";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public GoldenNumberService(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Create a new player</summary>
        /// <param name="nickName">User nickname
        /// If the length exceeds 20, it will be truncated
        /// It is recommended to set a nickname, which has a better recognition</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserRspModel> NewUserAsync(string nickName)
        {
            return NewUserAsync(nickName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Create a new player</summary>
        /// <param name="nickName">User nickname
        /// If the length exceeds 20, it will be truncated
        /// It is recommended to set a nickname, which has a better recognition</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<UserRspModel> NewUserAsync(string nickName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/NewUser?");
            if (nickName != null) 
            {
                urlBuilder_.Append("nickName=").Append(System.Uri.EscapeDataString(ConvertToString(nickName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(UserRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Set nickname</summary>
        /// <param name="uid">User ID</param>
        /// <param name="nickName">User nickname, length greater than 20 will be truncated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UserRspModel> NickNameAsync(string uid, string nickName)
        {
            return NickNameAsync(uid, nickName, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Set nickname</summary>
        /// <param name="uid">User ID</param>
        /// <param name="nickName">User nickname, length greater than 20 will be truncated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<UserRspModel> NickNameAsync(string uid, string nickName, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/NickName?");
            if (uid != null) 
            {
                urlBuilder_.Append("uid=").Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nickName != null) 
            {
                urlBuilder_.Append("nickName=").Append(System.Uri.EscapeDataString(ConvertToString(nickName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(UserRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UserRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(UserRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get new game room</summary>
        /// <param name="numbers">Set how many numbers that each player need submit. Currently supports submitting 1 or 2 numbers.
        /// The default is 1, indicating that each player can submit one number</param>
        /// <param name="duration">Set the duration for each round
        /// The default value is 60 seconds, and the value ranges from 10 to 200</param>
        /// <param name="uid">The room creator ID</param>
        /// <param name="userCount">Set the maximum number of players allowed in the room
        /// The default value is 0, indicating no limit
        /// For the room with a limited number of players, when all players submit their numbers in current round, the score is calculated immediately and the next round begins.
        /// Note: The number of players here is for the room, not for one round, as long as the player submits his number for any round in the room, the player is always in the room.</param>
        /// <param name="roundCount">Set the total number of rounds
        /// The default value is 0, indicating no limit
        /// If there is no player submitting number in a certain round, the round is considered invalid, not counting the number of rounds.
        /// If the number of valid rounds reaches the total number of rounds set, the game ends and data is no longer allowed to be submitted.</param>
        /// <param name="manuallyStart">Whether to start the game manually
        /// The default value is 0, indicating that the game starts automatically after the room is created.
        /// If it is 1, it means that the game needs to be started manually by the creator.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NewRoomRspModel> NewRoomAsync(int? numbers, int? duration, string uid, int? userCount, int? roundCount, int? manuallyStart)
        {
            return NewRoomAsync(numbers, duration, uid, userCount, roundCount, manuallyStart, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get new game room</summary>
        /// <param name="numbers">Set how many numbers that each player need submit. Currently supports submitting 1 or 2 numbers.
        /// The default is 1, indicating that each player can submit one number</param>
        /// <param name="duration">Set the duration for each round
        /// The default value is 60 seconds, and the value ranges from 10 to 200</param>
        /// <param name="uid">The room creator ID</param>
        /// <param name="userCount">Set the maximum number of players allowed in the room
        /// The default value is 0, indicating no limit
        /// For the room with a limited number of players, when all players submit their numbers in current round, the score is calculated immediately and the next round begins.
        /// Note: The number of players here is for the room, not for one round, as long as the player submits his number for any round in the room, the player is always in the room.</param>
        /// <param name="roundCount">Set the total number of rounds
        /// The default value is 0, indicating no limit
        /// If there is no player submitting number in a certain round, the round is considered invalid, not counting the number of rounds.
        /// If the number of valid rounds reaches the total number of rounds set, the game ends and data is no longer allowed to be submitted.</param>
        /// <param name="manuallyStart">Whether to start the game manually
        /// The default value is 0, indicating that the game starts automatically after the room is created.
        /// If it is 1, it means that the game needs to be started manually by the creator.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<NewRoomRspModel> NewRoomAsync(int? numbers, int? duration, string uid, int? userCount, int? roundCount, int? manuallyStart, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/NewRoom?");
            if (numbers != null) 
            {
                urlBuilder_.Append("numbers=").Append(System.Uri.EscapeDataString(ConvertToString(numbers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (duration != null) 
            {
                urlBuilder_.Append("duration=").Append(System.Uri.EscapeDataString(ConvertToString(duration, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uid != null) 
            {
                urlBuilder_.Append("uid=").Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userCount != null) 
            {
                urlBuilder_.Append("userCount=").Append(System.Uri.EscapeDataString(ConvertToString(userCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roundCount != null) 
            {
                urlBuilder_.Append("roundCount=").Append(System.Uri.EscapeDataString(ConvertToString(roundCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (manuallyStart != null) 
            {
                urlBuilder_.Append("manuallyStart=").Append(System.Uri.EscapeDataString(ConvertToString(manuallyStart, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NewRoomRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NewRoomRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(NewRoomRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Start the game</summary>
        /// <param name="uid">The room creator ID</param>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartGameAsync(string uid, int? roomid)
        {
            return StartGameAsync(uid, roomid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Start the game</summary>
        /// <param name="uid">The room creator ID</param>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartGameAsync(string uid, int? roomid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/StartGame?");
            if (uid != null) 
            {
                urlBuilder_.Append("uid=").Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomid != null) 
            {
                urlBuilder_.Append("roomid=").Append(System.Uri.EscapeDataString(ConvertToString(roomid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get game status</summary>
        /// <param name="uid">User ID</param>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StateRspModel> StateAsync(string uid, int? roomid)
        {
            return StateAsync(uid, roomid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get game status</summary>
        /// <param name="uid">User ID</param>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StateRspModel> StateAsync(string uid, int? roomid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/State?");
            if (uid != null) 
            {
                urlBuilder_.Append("uid=").Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roomid != null) 
            {
                urlBuilder_.Append("roomid=").Append(System.Uri.EscapeDataString(ConvertToString(roomid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(StateRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StateRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(StateRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Submit your numbers</summary>
        /// <param name="uid">User ID</param>
        /// <param name="rid">The round ID which the numbers submit to, in GUID format</param>
        /// <param name="n1">The number that player want to submit. Must be a rational number between 0 and 100, excluding 0 and 100.</param>
        /// <param name="n2">The second number that player want to sumbit. This parameter is required if current room support two numbers.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SubmitRspModel> SubmitAsync(string uid, string rid, string n1, string n2)
        {
            return SubmitAsync(uid, rid, n1, n2, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Submit your numbers</summary>
        /// <param name="uid">User ID</param>
        /// <param name="rid">The round ID which the numbers submit to, in GUID format</param>
        /// <param name="n1">The number that player want to submit. Must be a rational number between 0 and 100, excluding 0 and 100.</param>
        /// <param name="n2">The second number that player want to sumbit. This parameter is required if current room support two numbers.</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SubmitRspModel> SubmitAsync(string uid, string rid, string n1, string n2, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Submit?");
            if (uid != null) 
            {
                urlBuilder_.Append("uid=").Append(System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rid != null) 
            {
                urlBuilder_.Append("rid=").Append(System.Uri.EscapeDataString(ConvertToString(rid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (n1 != null) 
            {
                urlBuilder_.Append("n1=").Append(System.Uri.EscapeDataString(ConvertToString(n1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (n2 != null) 
            {
                urlBuilder_.Append("n2=").Append(System.Uri.EscapeDataString(ConvertToString(n2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SubmitRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SubmitRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SubmitRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get history of golden numbers</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TodayGoldenListRspModel> TodayGoldenListAsync(int? roomid)
        {
            return TodayGoldenListAsync(roomid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get history of golden numbers</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TodayGoldenListRspModel> TodayGoldenListAsync(int? roomid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TodayGoldenList?");
            if (roomid != null) 
            {
                urlBuilder_.Append("roomid=").Append(System.Uri.EscapeDataString(ConvertToString(roomid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TodayGoldenListRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TodayGoldenListRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TodayGoldenListRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get history numbers submitted by players</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TodayNumbersRspModel> TodayNumbersAsync(int? roomid)
        {
            return TodayNumbersAsync(roomid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get history numbers submitted by players</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TodayNumbersRspModel> TodayNumbersAsync(int? roomid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TodayNumbers?");
            if (roomid != null) 
            {
                urlBuilder_.Append("roomid=").Append(System.Uri.EscapeDataString(ConvertToString(roomid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TodayNumbersRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TodayNumbersRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TodayNumbersRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get players' score</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TodayScoreRspModel> TodayScoreAsync(int? roomid)
        {
            return TodayScoreAsync(roomid, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get players' score</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TodayScoreRspModel> TodayScoreAsync(int? roomid, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TodayScore?");
            if (roomid != null) 
            {
                urlBuilder_.Append("roomid=").Append(System.Uri.EscapeDataString(ConvertToString(roomid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TodayScoreRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TodayScoreRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TodayScoreRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get pagination history data</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <param name="startrid">The ID of the round which the history start from
        /// If this parameter is empty, the default is the current round</param>
        /// <param name="count">Specifies the history of how many rounds to return from the round startid, excluding the round startrid
        /// If this parameter is not specified, the default is 10 and the maximum is 100.</param>
        /// <param name="direction">Direction when query the history
        /// The default value is 0, indicating that the old historical data is queried from the round startid.
        /// Another value is 1, indicating that the newer data is queried from the round startrid</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryRspModel> HistoryAsync(int? roomid, string startrid, int? count, int? direction)
        {
            return HistoryAsync(roomid, startrid, count, direction, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get pagination history data</summary>
        /// <param name="roomid">Room ID
        /// If this parameter is empty, use the default room 0</param>
        /// <param name="startrid">The ID of the round which the history start from
        /// If this parameter is empty, the default is the current round</param>
        /// <param name="count">Specifies the history of how many rounds to return from the round startid, excluding the round startrid
        /// If this parameter is not specified, the default is 10 and the maximum is 100.</param>
        /// <param name="direction">Direction when query the history
        /// The default value is 0, indicating that the old historical data is queried from the round startid.
        /// Another value is 1, indicating that the newer data is queried from the round startrid</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryRspModel> HistoryAsync(int? roomid, string startrid, int? count, int? direction, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/History?");
            if (roomid != null) 
            {
                urlBuilder_.Append("roomid=").Append(System.Uri.EscapeDataString(ConvertToString(roomid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startrid != null) 
            {
                urlBuilder_.Append("startrid=").Append(System.Uri.EscapeDataString(ConvertToString(startrid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (direction != null) 
            {
                urlBuilder_.Append("direction=").Append(System.Uri.EscapeDataString(ConvertToString(direction, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryRspModel>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BadRequestRspModel); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<BadRequestRspModel>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(HistoryRspModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserRspModel 
    {
        /// <summary>User ID in the format of Guid</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        /// <summary>User nickname</summary>
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NickName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BadRequestRspModel 
    {
        /// <summary>Error message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BadRequestRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BadRequestRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NewRoomRspModel 
    {
        /// <summary>Room ID</summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Always)]
        public int RoomId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NewRoomRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewRoomRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BaseRspModel 
    {
        /// <summary>The current round ID in the current room</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid RoundId { get; set; }
    
        /// <summary>How many seconds are there in the current round</summary>
        [Newtonsoft.Json.JsonProperty("leftTime", Required = Newtonsoft.Json.Required.Always)]
        public int LeftTime { get; set; }
    
        /// <summary>Current round deadline time in UTC format</summary>
        [Newtonsoft.Json.JsonProperty("roundEndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset RoundEndTime { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BaseRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StateRspModel : BaseRspModel
    {
        /// <summary>User ID</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        /// <summary>User nickname</summary>
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NickName { get; set; }
    
        /// <summary>Room ID</summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Always)]
        public int RoomId { get; set; }
    
        /// <summary>The number of numbers that can be submitted for the current room, 1 or 2.</summary>
        [Newtonsoft.Json.JsonProperty("numbers", Required = Newtonsoft.Json.Required.Always)]
        public int Numbers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Always)]
        public int Duration { get; set; }
    
        /// <summary>Current game status
        /// 0 means ongoing
        /// 1 means not started, need room creator to manually start
        /// 2 means the game is over, and it is not allowed to submit</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        public int State { get; set; }
    
        /// <summary>Whether the current user submitted numbers this round</summary>
        [Newtonsoft.Json.JsonProperty("hasSubmitted", Required = Newtonsoft.Json.Required.Always)]
        public bool HasSubmitted { get; set; }
    
        /// <summary>Whether the current user is the creator of the current room
        /// If the room is created without specifying an automatic start, the creator needs to manually start the game</summary>
        [Newtonsoft.Json.JsonProperty("isRoomCreator", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRoomCreator { get; set; }
    
        /// <summary>Number of players set when creating a room
        /// 0 means no limit
        /// Maximum cannot exceed 200
        /// If the current room set the maximum number of players, then when all players submit their numbers in current round, the score is calculated immediately and the next round begins.</summary>
        [Newtonsoft.Json.JsonProperty("maxUserCount", Required = Newtonsoft.Json.Required.Always)]
        public int MaxUserCount { get; set; }
    
        /// <summary>The number of players who submitted numbers in this room</summary>
        [Newtonsoft.Json.JsonProperty("currentUserCount", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentUserCount { get; set; }
    
        /// <summary>The number of valid rounds that can be made in this room</summary>
        [Newtonsoft.Json.JsonProperty("totalRoundCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalRoundCount { get; set; }
    
        /// <summary>The number of valid rounds that have been performed in this room</summary>
        [Newtonsoft.Json.JsonProperty("finishedRoundCount", Required = Newtonsoft.Json.Required.Always)]
        public int FinishedRoundCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static StateRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StateRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SubmitRspModel 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SubmitRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubmitRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TodayGoldenListRspModel 
    {
        /// <summary>Room ID</summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Always)]
        public int RoomId { get; set; }
    
        /// <summary>The golden number history in the room that day, the last value is the golden number of the latest round.</summary>
        [Newtonsoft.Json.JsonProperty("goldenNumberList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GoldenNumberList { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TodayGoldenListRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TodayGoldenListRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TodayNumbersRspModel 
    {
        /// <summary>Room ID</summary>
        [Newtonsoft.Json.JsonProperty("roomId", Required = Newtonsoft.Json.Required.Always)]
        public int RoomId { get; set; }
    
        /// <summary>The number of numbers that can be submitted for the current room, 1 or 2.
        /// When it is 1, only number1 in the following data is valid;
        /// When it is 2, number1 and number2 in the following data are valid numbers.</summary>
        [Newtonsoft.Json.JsonProperty("validNumbers", Required = Newtonsoft.Json.Required.Always)]
        public int ValidNumbers { get; set; }
    
        /// <summary>The list of numbers that players submitted</summary>
        [Newtonsoft.Json.JsonProperty("numberList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserNumber> NumberList { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TodayNumbersRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TodayNumbersRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserNumber 
    {
        /// <summary>User index number, the same user index number indicates the number submitted by the same user in different rounds</summary>
        [Newtonsoft.Json.JsonProperty("userIndex", Required = Newtonsoft.Json.Required.Always)]
        public int UserIndex { get; set; }
    
        /// <summary>Round index number, the same round index number indicates the number of different users submitted in the same round</summary>
        [Newtonsoft.Json.JsonProperty("roundIndex", Required = Newtonsoft.Json.Required.Always)]
        public int RoundIndex { get; set; }
    
        /// <summary>The number that submitted by the user</summary>
        [Newtonsoft.Json.JsonProperty("number1", Required = Newtonsoft.Json.Required.Always)]
        public double Number1 { get; set; }
    
        /// <summary>The second number submitted by the user, this is only valid when the current room supports submitting two numbers.</summary>
        [Newtonsoft.Json.JsonProperty("number2", Required = Newtonsoft.Json.Required.Always)]
        public double Number2 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNumber FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNumber>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TodayScoreRspModel 
    {
        /// <summary>Player score list</summary>
        [Newtonsoft.Json.JsonProperty("scoreList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserScore> ScoreList { get; set; }
    
        /// <summary>Date</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TodayScoreRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TodayScoreRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserScore 
    {
        /// <summary>User ID</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        /// <summary>User nickname</summary>
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NickName { get; set; }
    
        /// <summary>Score</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public int Score { get; set; }
    
        /// <summary>The user's index number in the current room</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public int Index { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserScore FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserScore>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class HistoryRspModel 
    {
        /// <summary>Array of rounds</summary>
        [Newtonsoft.Json.JsonProperty("rounds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoundNumbers> Rounds { get; set; }
    
        /// <summary>User ID and nickname dictionary
        /// The key is user ID, and the value is nickname</summary>
        [Newtonsoft.Json.JsonProperty("nickNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> NickNames { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HistoryRspModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryRspModel>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RoundNumbers 
    {
        /// <summary>Round ID</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoundId { get; set; }
    
        /// <summary>The index number of the round in the current room</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public int Index { get; set; }
    
        /// <summary>The golden number of the round</summary>
        [Newtonsoft.Json.JsonProperty("goldenNumber", Required = Newtonsoft.Json.Required.Always)]
        public double GoldenNumber { get; set; }
    
        /// <summary>Current round deadline time in UTC format</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Time { get; set; }
    
        /// <summary>Number submitted by all players in the round</summary>
        [Newtonsoft.Json.JsonProperty("userNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserNumber2> UserNumbers { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RoundNumbers FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoundNumbers>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserNumber2 
    {
        /// <summary>User ID</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        /// <summary>The number that submitted by the user</summary>
        [Newtonsoft.Json.JsonProperty("masterNumber", Required = Newtonsoft.Json.Required.Always)]
        public double MasterNumber { get; set; }
    
        /// <summary>The second number submitted by the user, this is only valid when the current room supports submitting two numbers.</summary>
        [Newtonsoft.Json.JsonProperty("slaveNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SlaveNumber { get; set; }
    
        /// <summary>User's score in the current round</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public int Score { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UserNumber2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNumber2>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}